// 配置
const _headersRequestConfig = {

}
const _headersResponseConfig = {

}

const _headersConfitStart = {
    status: false
};


// 安装初始化
chrome.runtime.onInstalled.addListener(function() {
    chrome.storage.local.get("headersConfig", function(config){
        if(config.headersConfig == null) {
            // 设置 headersConfig
            chrome.storage.local.set({headersConfig: {}}, function(){
                
            });
        }
    });
});

function load_config(localConfig){
    for(var i = 0;i < localConfig.length;i++){
        var key = localConfig[i].key;
        var value = localConfig[i].value;
        var type = localConfig[i].type;
        var on = localConfig[i].on;

        if(type == "request"){
            if(on == 1){
                _headersRequestConfig[key] = value;
            }else{
                delete _headersRequestConfig[key];
            }
        }else if(type == "response"){
            if(on == 1){
                _headersResponseConfig[key] = value;
            }else{
                delete _headersResponseConfig[key];
            }
        }
    }
}

function init(){
    chrome.storage.local.get(["headersConfig", "headerConfigStart"], function(headers){
        var headersConfig = headers.headersConfig;

        if(!headersConfig){
            return ;
        }

        if(headers.headerConfigStart){
            _headersConfitStart.status = true;
        }else{
            _headersConfitStart.status = false;
        }

        // 加载 headers 配置
        load_config(headersConfig);

    });
}

// 初始化
init();

chrome.webRequest.onBeforeRequest.addListener(function(detail) {
    // sessionStorage.setItem(detail.tabId+"", );
}, {urls: ["<all_urls>"]}, ["blocking", "requestBody"]);

// 捕获请求的headers
chrome.webRequest.onBeforeSendHeaders.addListener(function(detail) {
    var headers = detail.requestHeaders;
    // 开关
    if(_headersConfitStart.status) {
        for(var key in _headersRequestConfig){
            headers.push({
                name: key,
                value: _headersRequestConfig[key]
            })
        }
        return {requestHeaders: headers};
    }
    
}, {urls: ["<all_urls>"]}, ["blocking", "requestHeaders", "extraHeaders"]);

chrome.webRequest.onResponseStarted.addListener(function(detail) {
}, {urls: ["<all_urls>"]});


// 监控数据变化
chrome.storage.onChanged.addListener(function(changes, items){
    init();
});

// 捕获请求的 headers
chrome.webRequest.onHeadersReceived.addListener(function(response){
    var headers = response.responseHeaders;

    // 判断总开关
    if(_headersConfitStart.status) {
        // 从 config 里面取数据出来添加到响应头里面
        for(var key in _headersResponseConfig){
            headers.push({
                name: key,
                value: _headersResponseConfig[key]
            })
        }
        return {responseHeaders: headers};
    }
}, {urls: ["<all_urls>"]}, ["responseHeaders", "blocking"]);

// chrome.notifications.create(null, {
//     title: "啦啦啦",
//     type: "basic",
//     iconUrl: "images/debug.png",
//     message: "message"
// }, function(item){
//     console.log(item);
// });
